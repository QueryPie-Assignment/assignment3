name: query-pie CI/CD

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          distribution: 'temurin'
          java-version: '17'

      # YML 파일 생성 (환경별)
      - name: Set YML for DEVELOP
        if: github.ref == 'refs/heads/develop'
        run: |
          mkdir -p presentation/src/main/resources
          echo "${{ secrets.APPLICATION_YML_LOCAL }}" | base64 --decode > presentation/src/main/resources/application.yml
          echo "${{ secrets.APPLICATION_LOCAL_YML }}" | base64 --decode > presentation/src/main/resources/application-local.yml
          find presentation/src

      - name: Set YML for PRODUCTION
        if: github.base_ref == 'master'
        run: |
          mkdir -p presentation/src/main/resources
          echo "${{ secrets.APPLICATION_YML_PRODUCTION }}" | base64 --decode > presentation/src/main/resources/application.yml
          echo "${{ secrets.APPLICATION_PRODUCTION_YML }}" | base64 --decode > presentation/src/main/resources/application-production.yml
          find presentation/src

      # Gradle Build
      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      # Docker Config
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and Push Docker Image (DEVELOP)
        if: github.ref == 'refs/heads/develop'
        env:
          NAME: ${{ secrets.DOCKER_USERNAME }}
          REPO: query-pie-develop   # 테스트 서버용 별도 리포지토리
        run: |
          docker build -t $REPO .
          docker tag $REPO:latest $NAME/$REPO:latest
          docker push $NAME/$REPO:latest

      - name: Build and Push Docker Image (PRODUCTION)
        if: github.base_ref == 'master'
        env:
          NAME: ${{ secrets.DOCKER_USERNAME }}
          REPO: query-pie-prod   # 운영 서버용 별도 리포지토리
        run: |
          docker build -t $REPO .
          docker tag $REPO:latest $NAME/$REPO:latest
          docker push $NAME/$REPO:latest

  deploy:
    needs: build
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Set up SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Set Docker permissions
        run: |
          sudo usermod -aG docker $USER
          sudo chown $USER /var/run/docker.sock
          newgrp docker

      - name: Clean up Docker to free space
        run: |
          sudo docker container prune -f
          sudo docker image prune -a -f
          sudo docker volume prune -f
          sudo docker network prune -f
          sudo rm -rf /var/lib/apt/lists/*
          sudo apt-get clean
          sudo apt-get autoremove

      # 배포할 서버 선택 (develop → 테스트 서버, master → 운영 서버)
      - name: Deploy to LOCAL EC2
        if: github.ref == 'refs/heads/develop'
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@${{ secrets.LOCAL_EC2_IP }} << 'EOF'
            sudo docker ps -q --filter "name=query-pie-develop" | grep -q . && sudo docker stop "query-pie-develop" && sudo docker rm "query-pie-develop"
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/query-pie-develop:latest
            sudo docker run -d --name query-pie-develop --rm -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/query-pie-develop:latest
          EOF

      - name: Deploy to PROD EC2
        if: github.base_ref == 'master'
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@${{ secrets.PROD_EC2_IP }} << 'EOF'
            sudo docker ps -q --filter "name=query-pie-prod" | grep -q . && sudo docker stop "query-pie-prod" && sudo docker rm "query-pie-prod"
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/query-pie-prod:latest
            sudo docker run -d --name query-pie-prod --rm -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/query-pie-prod:latest
          EOF
